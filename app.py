from flask import Flask, request, jsonify, render_template
import torch
from torch import nn


class SimpleRNN(nn.Module):

  def __init__(self, vocab_size):
    super().__init__()
    self.embedding = nn.Embedding(vocab_size, embedding_dim=50)
    self.rnn = nn.RNN(50, 64, batch_first=True)
    self.fc = nn.Linear(64, vocab_size)

  def forward(self, question):
    embedded_question = self.embedding(question)
    hidden, final = self.rnn(embedded_question)
    output = self.fc(final.squeeze(0))

    return output

# Allowlist the SimpleRNN class
torch.serialization.add_safe_globals([SimpleRNN, nn.Embedding,nn.RNN, nn.Linear])
# Load the trained model
model = torch.load("fraud_detection_model.pth")  # Load the full model object
model.eval()  # Set the model to evaluation mode

  

# Vocabulary for preprocessing
vocab = {'<UNK>': 0,
 'is': 1,
 'pm.': 2,
 'doctors': 3,
 'your': 4,
 'for': 5,
 'reminder:': 6,
 'appointment': 7,
 'scheduled': 8,
 '3!': 9,
 'no': 10,
 'vacation!': 11,
 'card': 12,
 'information.': 13,
 'a': 14,
 'credit': 15,
 'provide': 16,
 'free': 17,
 'win': 18,
 'just': 19,
 'yes': 20,
 '$1,000,000.': 21,
 'congratulations!': 22,
 'you': 23,
 'won': 24,
 'password.': 25,
 'reset': 26,
 'compromised.': 27,
 'here': 28,
 'has': 29,
 'to': 30,
 'been': 31,
 'click': 32,
 'account': 33,
 'account.': 34,
 'confirm': 35,
 'weve': 36,
 'identity.': 37,
 'activity': 38,
 'detected': 39,
 'unusual': 40,
 'in!': 41,
 'in': 42,
 'please': 43,
 'send': 44,
 'updates.': 45,
 'me': 46,
 'the': 47,
 'project:': 48,
 'conference': 49,
 'at': 50,
 'see': 51,
 'tomorrow.': 52,
 'will': 53,
 'final': 54,
 'locked.': 55,
 'be': 56,
 'warning:': 57,
 'paypal': 58,
 'security': 59,
 'now.': 60,
 'social': 61,
 'act': 62,
 'number': 63,
 'clicking': 64,
 'exclusive': 65,
 'link.': 66,
 'offer!': 67,
 'by': 68,
 'this': 69,
 'get': 70,
 'iphone': 71,
 'can': 72,
 'eod': 73,
 'report': 74,
 'review': 75,
 '3': 76,
 'appointment;': 77,
 'project': 78,
 'update': 79,
 'immediately.': 80,
 'information': 81,
 'payment': 82,
 'failed.': 83,
 'billing': 84,
 'eod:': 85,
 'bank': 86,
 'immediately': 87,
 'details': 88,
 'avoid': 89,
 'urgent:': 90,
 'verify': 91,
 'suspension.:': 92,
 'lets': 93,
 'catch': 94,
 'over': 95,
 'up': 96,
 'lunch': 97,
 'suspension.': 98,
 'dont': 99,
 'meeting': 100,
 'late.': 101,
 'pm,': 102,
 '5': 103,
 'next': 104,
 'week.': 105,
 'forward': 106,
 'looking': 107,
 'been;': 108,
 'locked.;': 109,
 'just!': 110,
 'can;': 111,
 'happy': 112,
 'birthday!': 113,
 'wishing': 114,
 'wonderful': 115,
 'day.': 116,
 'successfully.': 117,
 'delivered': 118,
 'package;': 119,
 'meeting;': 120,
 'claim': 121,
 'only.': 122,
 'now!': 123,
 'time': 124,
 'gift': 125,
 'limited': 126,
 'free:': 127,
 'package': 128,
 'please;': 129,
 'payment.': 130,
 'order': 131,
 'thanks': 132,
 'confirmed..': 133,
 'will!': 134,
 'the:': 135,
 'credit:': 136,
 'provide.': 137,
 'just:': 138,
 'here!': 139,
 'immediately.;': 140,
 'review.': 141,
 'warning:.': 142,
 'be:': 143,
 'at:': 144,
 'you.': 145,
 'confirmed.': 146,
 'the;': 147,
 'a;': 148,
 'report!': 149,
 'your.': 150,
 'order.': 151,
 'has:': 152,
 'bank:': 153,
 'free.': 154,
 'is.': 155,
 'account.!': 156,
 'be.': 157,
 'information:': 158,
 'you!': 159,
 'unusual:': 160,
 'the!': 161,
 'account!': 162,
 'up!': 163,
 'see:': 164,
 'in:': 165,
 'time;': 166,
 'account;': 167,
 'failed.:': 168,
 'you;': 169,
 'me;': 170,
 'send;': 171,
 'please!': 172,
 'by;': 173,
 'you:': 174,
 'final;': 175,
 '5;': 176,
 'credit!': 177,
 'at.': 178,
 'your!': 179,
 'at;': 180,
 'now!!': 181,
 'win!': 182,
 'compromised..': 183,
 'billing!': 184,
 'iphone;': 185,
 '3:': 186,
 'tomorrow.;': 187,
 'can!': 188,
 'dont:': 189,
 'doctors;': 190,
 'catch!': 191,
 'has;': 192,
 'happy.': 193,
 'over!': 194,
 'report:': 195,
 'details:': 196,
 'verify.': 197,
 'won!': 198,
 'late.!': 199,
 'can:': 200,
 'been:': 201,
 'detected;': 202,
 'review;': 203,
 'tomorrow.!': 204,
 'happy:': 205,
 'the.': 206,
 'vacation!:': 207,
 'details;': 208,
 'dont;': 209,
 'final.': 210,
 'paypal;': 211,
 'send:': 212,
 'a:': 213,
 'lets:': 214,
 'at!': 215,
 'claim:': 216,
 'by.': 217,
 'provide;': 218,
 'vacation!!': 219,
 'to;': 220,
 'unusual.': 221,
 'final!': 222,
 'be;': 223,
 'bank.': 224,
 'please.': 225,
 'win.': 226,
 'warning:;': 227,
 'lets!': 228,
 'number:': 229,
 'a.': 230,
 'link.!': 231,
 'pm.;': 232,
 'locked.:': 233,
 '$1,000,000.;': 234,
 'get!': 235,
 'next;': 236,
 'forward:': 237,
 '$1,000,000.!': 238,
 'now.;': 239,
 'clicking.': 240,
 'next!': 241,
 'security.': 242,
 'time.': 243,
 'information.;': 244,
 'final:': 245,
 'activity.': 246,
 'pm,:': 247,
 'information.:': 248,
 'for!': 249,
 'vacation!.': 250,
 '3.': 251,
 'provide:': 252,
 'information.!': 253,
 'failed..': 254,
 'wishing;': 255,
 'send!': 256,
 'clicking:': 257,
 'your:': 258,
 'reminder:.': 259,
 'free;': 260,
 'has.': 261,
 'lunch;': 262,
 'exclusive.': 263,
 'scheduled:': 264,
 'congratulations!:': 265,
 'just;': 266,
 'looking!': 267,
 'limited;': 268,
 'will.': 269,
 'conference;': 270,
 'identity.;': 271,
 'for:': 272,
 'activity:': 273,
 'eod.': 274,
 'delivered:': 275,
 'to!': 276,
 '5:': 277,
 'conference!': 278,
 'forward;': 279,
 'project;': 280,
 'vacation!;': 281,
 'has!': 282,
 'now..': 283,
 'offer!:': 284,
 'for.': 285,
 'doctors!': 286,
 'lunch:': 287,
 'looking;': 288,
 'billing.': 289,
 'dont.': 290,
 'security;': 291,
 'detected.': 292,
 'please:': 293,
 'review!': 294,
 'me.': 295,
 'urgent:!': 296,
 'by:': 297,
 'lets.': 298,
 'confirm.': 299,
 'reset.': 300,
 'information..': 301,
 'act;': 302,
 'catch.': 303,
 'act:': 304,
 'billing:': 305,
 'in;': 306,
 'your;': 307,
 'is;': 308,
 'time!': 309,
 'next:': 310,
 'scheduled.': 311,
 'card!': 312,
 'link..': 313,
 'reset:': 314,
 'compromised.;': 315,
 'paypal:': 316,
 'confirmed.!': 317,
 '$1,000,000..': 318,
 'updates.;': 319,
 'project.': 320,
 'link.;': 321,
 'to.': 322,
 'exclusive!': 323,
 'social.': 324,
 'immediately:': 325,
 'for;': 326,
 'a!': 327,
 'free!': 328,
 '5!': 329,
 'confirmed.:': 330,
 'social:': 331,
 'gift:': 332,
 'urgent:;': 333,
 'update!': 334,
 'claim;': 335,
 'get:': 336,
 'offer!!': 337,
 'clicking!': 338,
 'tomorrow.:': 339,
 'order:': 340,
 'compromised.!': 341,
 'see;': 342,
 'over:': 343,
 'just.': 344,
 'suspension.;': 345,
 'be!': 346,
 'forward!': 347,
 'updates.:': 348,
 'act!': 349,
 'click;': 350,
 'reminder::': 351,
 'immediately;': 352,
 'pm.!': 353,
 'conference.': 354,
 'paypal.': 355,
 'pm,!': 356,
 'eod;': 357,
 'eod!': 358,
 'security!': 359,
 'detected:': 360,
 'gift!': 361,
 'been!': 362,
 'account:': 363,
 'number!': 364,
 'updates..': 365,
 'weve;': 366,
 'me!': 367,
 'reminder:!': 368,
 'happy!': 369,
 'conference:': 370,
 'update:': 371,
 'won:': 372,
 'get;': 373,
 'click:': 374,
 'next.': 375,
 'failed.!': 376,
 'been.': 377,
 'congratulations!;': 378,
 'reminder:;': 379,
 'delivered!': 380,
 'to:': 381,
 'failed.;': 382,
 'pm,.': 383,
 'won;': 384,
 'exclusive;': 385,
 'billing;': 386,
 'this:': 387,
 '5.': 388,
 'payment.!': 389,
 'card:': 390,
 'by!': 391,
 'updates.!': 392,
 'now!.': 393,
 'won.': 394,
 'warning:!': 395,
 'late..': 396,
 'now!:': 397,
 'lunch!': 398,
 'birthday!;': 399,
 'scheduled;': 400,
 'review:': 401,
 'week.;': 402,
 'now.!': 403,
 'report;': 404,
 'congratulations!!': 405,
 'birthday!!': 406,
 'activity!': 407,
 'wishing:': 408,
 'social;': 409,
 'bank;': 410,
 'here:': 411,
 '$1,000,000.:': 412,
 'payment!': 413,
 'over;': 414,
 'weve:': 415,
 'locked.!': 416,
 'send.': 417,
 'paypal!': 418,
 'get.': 419,
 'payment:': 420,
 'is!': 421,
 'project!': 422,
 'day.;': 423,
 'pm.:': 424,
 'card;': 425,
 'successfully.;': 426,
 'exclusive:': 427,
 'report.': 428,
 'identity.!': 429,
 '3;': 430,
 'delivered.': 431,
 'confirm:': 432,
 'package:': 433,
 'password..': 434,
 'confirm;': 435,
 'provide!': 436,
 'see!': 437,
 'birthday!:': 438,
 'tomorrow..': 439,
 'up:': 440,
 'password.!': 441,
 'immediately.:': 442,
 'security:': 443,
 'lets;': 444,
 'limited.': 445,
 'urgent:.': 446,
 'compromised.:': 447,
 'congratulations!.': 448,
 'me:': 449,
 'account..': 450,
 'appointment.': 451,
 'payment.:': 452,
 'card.': 453,
 'avoid;': 454,
 'detected!': 455,
 'week.!': 456,
 'limited:': 457,
 'number.': 458,
 'day.:': 459,
 'late.:': 460,
 'suspension.!': 461,
 'catch;': 462,
 'social!': 463,
 'in.': 464,
 'can.': 465,
 'password.:': 466,
 'avoid!': 467,
 'payment.;': 468,
 'up;': 469,
 'credit.': 470,
 'win:': 471,
 'avoid:': 472,
 'see.': 473,
 'appointment!': 474,
 'identity..': 475,
 'offer!;': 476,
 'now.:': 477,
 'week..': 478,
 'information;': 479,
 'package.': 480,
 'unusual;': 481,
 'warning::': 482,
 'wonderful;': 483,
 'locked..': 484,
 'information!': 485,
 'payment;': 486,
 'account.;': 487,
 'up.': 488,
 'dont!': 489,
 'pm..': 490,
 'reset!': 491,
 'day.!': 492,
 'offer!.': 493,
 'late.;': 494,
 'meeting:': 495,
 'wonderful!': 496}

# Flask app setup
app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    # Get the input data from the form
    question = request.form.get('question')
    if not question:
        return jsonify({'error': 'No question provided'}), 400
    def tokenized(text):
        text = text.lower()
        text = text.replace('?','')
        text = text.replace("'",'')
        text = text.split()
        return text
    # Preprocess the input
    def text_indice(text,vocab):
        indice = []
        for text in tokenized(text):
                if text in vocab:
                    indice.append(vocab[text])
                else:
                    indice.append(vocab['<UNK>'])
        return indice

    # Get model predictions
    def predict(model, question, threshold=0.4):

  # convert question to numbers
        numerical_question = text_indice(question, vocab)

  # tensor
        question_tensor = torch.tensor(numerical_question).unsqueeze(0)

  # send to model
        output = model(question_tensor)

  # convert logits to probs
        probs = torch.nn.functional.softmax(output, dim=1)

  # find index of max prob
        value, index = torch.max(probs, dim=1)

        if value < threshold:
            print("No")

        return (list(vocab.keys())[index])
    return jsonify({'result': predict(model,question,threshold=0.5)})
if __name__ == "__main__":
    app.run(debug=True)